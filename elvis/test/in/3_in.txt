#define BOOST_TEST_MODULE test_elvis<br>#include <boost/test/included/unit_test.hpp><br>#include <stdexcept><br>#include "elvis.hpp"<br>using namespace std;<br><br>BOOST_AUTO_TEST_CASE(one_sep)<br>{<br>    Parser parser;<br>    parser.add_text("1,22,333");<br>    parser.add_sep(",");<br>    vector<string> expected = {"1", "22", "333"},<br>                   actual = parser.parse();<br>    BOOST_TEST(expected == actual);<br>}<br><br>BOOST_AUTO_TEST_CASE(two_sep)<br>{<br>    Parser parser;<br>    parser.add_text("1,22;333");<br>    parser.add_sep(",");<br>    parser.add_sep(";");<br>    vector<string> expected = {"1", "22", "333"},<br>                   actual = parser.parse();<br>    BOOST_TEST(expected == actual);<br>}<br><br>BOOST_AUTO_TEST_CASE(args)<br>{<br>    const char* test_argv[] = {"elvis"};<br>    BOOST_REQUIRE_EXCEPTION(check_args(1, test_argv), invalid_argument,<br>                            [](const invalid_argument& exc){ return exc.what() == string(ERR_WRONG_ARGUMENTS_NUM); });<br>    BOOST_REQUIRE_EXCEPTION(parallel_process("test/666.txt"), invalid_argument, <br>                            [](const invalid_argument& exc){ return exc.what() == string(ERR_PATH_NOT_EXIST); });<br>    BOOST_REQUIRE_EXCEPTION(parallel_process("test/1.txt"), invalid_argument, <br>                            [](const invalid_argument& exc){ return exc.what() == string(ERR_PATH_NOT_DIR); });<br>}<br><br>BOOST_AUTO_TEST_CASE(one_sep_part_of_another)<br>{<br>    Parser parser;<br>    parser.add_text("1,22;333;4");<br>    parser.add_sep(",");<br>    parser.add_sep(";");<br>    parser.add_sep(";3");<br>    vector<string> expected = {"1", "22", "33", "4"},<br>                   actual = parser.parse();<br>    BOOST_TEST(expected == actual);<br>}<br><br>BOOST_AUTO_TEST_CASE(two_sep_in_row)<br>{<br>    Parser parser;<br>    parser.add_text("1,,22");<br>    parser.add_sep(",");<br>    vector<string> expected = {"1", "22"},<br>                   actual = parser.parse();<br>    BOOST_TEST(expected == actual);<br>}<br><br>BOOST_AUTO_TEST_CASE(one_file)<br>{<br>    vector<string> expected;<br>    ifstream exp_stream("test/1_out.txt");<br>    string item;<br>    exp_stream >> item;<br>    while (exp_stream)<br>    {<br>        expected.push_back(item);<br>        exp_stream >> item;<br>    }<br><br>    vector<string> actual = process_file("test/1.txt");<br>    BOOST_TEST(expected == actual);<br>    <br>    for (const auto& str : expected)<br>        cerr << str << " ";<br>    cerr << endl;<br>    for (const auto& str : actual)<br>        cerr << str << " ";<br>    cerr << endl;<br>}<br>
<br>
 
::
<
>
,
(
)
;